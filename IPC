-----------------------------------------------     SIGNAL   ------------------------------------------------------
bits/signum.h
SIGNAL:
    SIGINT
    SIGHUP
    SIGTRAP
    SIGILL
    SIGQUIT
    SIGFPE
    SIGKILL
    SIGALRM
    SIGTERM
    SIGSTOP
    SIGUSR1/SIGUSR2
    SIGCHLD
                        parent wait() 
        child   exit()  ------------>   wake parent
                        
                        parent do not wait()
                        ------------------->    parent do not catch SIGCHLD, this signal do not work and child get into zombie
                        
                        parent ignore SIGCHLD
                        --------------------->  child end
                        
    ...
    
    core dump: SIGQUIT/SIGILL/SIGTRAP/SIGSYS/SIGFPE
    
    #include<signal.h>
    int signal(int sig, __sighandler_t handler);
    sig can be anyone except SIGKILL/SIGSTOP
    SIG_IGN/SIG_DFL: ignore/default
    process1 ---> exec() ---> process1: SIG_IGN and SIG_DFL is same
    process1 ---> fork() ---> process2 ---> exec(): exec will invoke SIG_DFL
    
    system call can not be interrupted by signal except wait/pause/read/write/open, they will return -1 and set errno to EINTR.
    same signal can not be interrupted. different signal will be interrupted.
    same signal can not be keep and order can not be keep
    
    #include<signal.h>
    int kill(pid_t pid, int sig);
    pid == 0: all processes in group process that contains current process
    pid == -1: from high to low to all processes
    pid < -1: all processes in group process that gid is abs(pid);
    
    one user's process can not send signal to another user's process.
    
    signal(SIGALRM, handler);
    alarm(seconds);
    pause();
    
    int setjump(jmp_buf env); // keep stack/heap status, then return;
    void longjmp(jmp_buf env, int val); // never return;
    
    
-----------------------------------------------     PIPE   ------------------------------------------------------
    one program's output    --->    another's input
    when create a pipe, kernel create a pair of handle(one stream), one for read, one for write.
    
    pipe();
    int pipe(inf fd[2]);
    0 on success
    -1 on error:    errno = EMFILE(no free descriptors)
                    errno = EFAULT(fd arrau is not valid)
    fd[0] for read, fd[1] for write
    
    dup();
    int dup(int oldfd);
    new descriptor on success
    -1 on error:    errno = EBADF(oldfd is not a valid descriptor)
                            EMFILE(too many descriptors for the process)
                            
    
    
Example:
    #include<stdio.h>
    #include<unistd.h>
    #include<string.h>
    
    int main()
    {
        int nbytes, fd[2];
        char string[] = "Hello, world!\n";
        char readBuffer[80];
        pid_t childpid;
        
        pipe(fd);
        if((childpid = fork()) == -1)
        {
            perror("fork error");
            exit(0);
        }
        
        if(childpid == 0)
        {
            close(fd[0]);//close read
            write(fd[1],string, strlen(string));
            exit(0);
        }
        else
        {
            close(fd[1]);
            nbytes = read(fd[0],readBuffer, sizeof(readBuffer));
            printf("Received data: %s\n",readBuffer);                
        }    
        return 0;
    }
------------------------------------------------------------------------------------------------------------------------------
IPC:
	
	信号：
		通知一个或多个进程异步事件的发生/系统用来处理严重的错误
		内核->进程
		进程->进程
		用作非正常情况的处理
		不能直接携带信息
		SIGHUP:
			终止终端：内核->终端的所有进程
		SIGINT:
			用户按了中断键CTRL+C:内核->与该终端有关联的所有进程
		SIGQUIT:
			与SIGINT类似，用户按了CTRL+\,内核->进程
			非正常终止，引起coredump(进程映像被转储到磁盘文件)
		SIGILL:
			进程企图执行非法指令，内核->进程
			引起core dump
		SIGTRAP:
			调试专用
			引起core dump
		SIGFPE:
			浮点错误(溢出)，内核->进程
		SIGKILL:
			进程->进程
			不能被忽略和捕捉，只能通过用户定义的中断处理程序来处理
			能绝对保证终止一个进程
		SIGALRM:
			定时器超时，内核->进程
			由alarm()设定
		SIGTERM:
			系统提供给普通程序使用，用来终止一个进程
		SIGSTOP:
			中止进程运行，系统将控制权转回等待运行的下一个进程
		SIGUSR1/SIGUSR2:
			非内核发送
		SIGCHLD:
			子进程结束信号，用它来实现系统调用exit和wait
			执行exit时，子进程向父进程发送SIGCHLD信号。

		SIGQUIT/SIGILL/SIGTRAP/SIGSYS/SIGFPE会发生core dump
		void abort();向调用进程发送一个信号，产生一个非正常终止，core dump

		int signal(int sig, _sighandler_t handler);
		SIG_IGN:忽略该信号
		SIG_DFL:恢复系统对信号的默认处理
		typedef void (*_sighandler_t)(int); 


	对于系统调用，信号在系统调用完成之前将不起作用。系统调用不能被打断
	能被打断的有：wait/pause/对慢速设备的read/write/open
	两个信号同时产生，系统不保证进程接受它们的次序。
	信号未被处理，调用signal,信号将被注销

	int kill(pid_t pid, int sig);
		发送信号
		pid == 0:
			信号被发送到当前进程所在的进程组的所有进程
		pid == -1:
			按进程标识符从高到低发送给全部进程
		pid < -1:
			发送给标识符为pid绝对值的进程组里的所有进程
		普通用户进程只能向具有相同用户标识符的进程发送信号
		一个用户进程不能向另一个用户进程发送信号

管道：
	匿名管道：
		一个管道在内核中对应了一对句柄(一个流)，一个管道用一个inode来表示。
		父子进程之间：父子进程能继承打开的文件
		int pipe(int fd[2]):建立管道
			fd[0]读，fd[1]写
		0:success
		-1:errno:































    
